class Solution {
    
    private int count_subset_sum(int weight[], int W, int n){
        int dp[][] = new int[n+1][W+1];

        
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=W;j++){
               
                if(i==0){
                    dp[0][j]=0;
                    
                }
                 if(j==0){
                    dp[i][0]=1;
                    
                }
                
                if(i>0){
                if(weight[i-1] > j) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i-1][j] + dp[i-1][j-weight[i-1]];
            }
        }
        }
        return dp[n][W];
    }
    
    public int findTargetSumWays(int[] nums, int S) {
        int n = nums.length;
        int sum=0;
        for(int i=0;i<n;i++)
            sum+=nums[i];
        int w = (sum+S)/2;
        if (S > sum) return 0;
        if ((S + sum) % 2 != 0) return 0;
        return count_subset_sum(nums,w,n);        
    }
}
